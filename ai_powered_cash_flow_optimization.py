# -*- coding: utf-8 -*-
"""AI-Powered Cash Flow Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOgciSxwCvdtK1StWNsubdUg7D2eE9yD
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder
import io
import plotly.express as px
import xlsxwriter

# PDF generation
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# ---------------------------
# Load trained model
# ---------------------------
model = pickle.load(open("model.pkl", "rb"))
st.set_page_config(page_title="AI Cash Flow Optimization", layout="wide", page_icon="üí∞")

# ---------------------------
# PDF Report Function
# ---------------------------
def create_pdf(df, kpis):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements, styles = [], getSampleStyleSheet()

    elements.append(Paragraph("AI-Powered Cash Flow Optimization Report", styles['Title']))
    elements.append(Spacer(1, 20))
    elements.append(Paragraph(f"üì¶ Total Invoices: <b>{kpis['total_invoices']}</b>", styles['Normal']))
    elements.append(Paragraph(f"‚è∞ Late Payments %: <b>{kpis['late_pct']:.1f}%</b>", styles['Normal']))
    elements.append(Paragraph(f"üìâ Avg Days Past Due: <b>{kpis['avg_days_due']:.1f}</b>", styles['Normal']))
    elements.append(Spacer(1, 20))

    table_data = [df.columns.tolist()] + df.head(20).values.tolist()
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.grey),
        ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
        ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0), (-1,-1), 8),
        ("GRID", (0,0), (-1,-1), 0.5, colors.black),
    ]))
    elements.append(table)
    doc.build(elements)
    buffer.seek(0)
    return buffer

# ---------------------------
# File upload / demo
# ---------------------------
st.title("üí∞ AI-Powered Cash Flow Optimization")
uploaded_file = st.file_uploader("üìÇ Upload AR Data (CSV)", type=["csv"])
use_demo = st.button("‚ñ∂Ô∏è Use Demo Data")

if uploaded_file or use_demo:
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.DataFrame({
            "Customer_ID": [101, 102, 103, 104, 105, 106, 107],
            "Industry": ["Manufacturing", "Retail", "Finance", "Healthcare", "IT Services", "Retail", "Finance"],
            "Region": ["North America", "Europe", "Asia", "Middle East", "Europe", "North America", "Asia"],
            "Invoice_Amount": [5000, 12000, 7000, 15000, 3000, 18000, 25000],
            "Invoice_Month": [1, 2, 3, 4, 5, 6, 7],
            "Due_Month": [2, 3, 4, 5, 6, 7, 8],
            "Days_Past_Due": [0, 15, 30, 5, 10, 25, 40]
        })

    st.subheader("üìä Data Preview")
    st.dataframe(df.head())

    # ---------------------------
    # Encode categoricals
    # ---------------------------
    le_industry, le_region = LabelEncoder(), LabelEncoder()
    df_encoded = df.copy()
    df_encoded["Industry"] = le_industry.fit_transform(df_encoded["Industry"])
    df_encoded["Region"] = le_region.fit_transform(df_encoded["Region"])

    X = df_encoded[["Industry","Region","Invoice_Amount","Invoice_Month","Due_Month","Days_Past_Due"]]

    # ---------------------------
    # Predictions
    # ---------------------------
    predictions = model.predict(X)
    probabilities = model.predict_proba(X)[:, 1]
    df["Predicted_Status"] = ["Late" if p == 1 else "On-Time" for p in predictions]
    df["Confidence"] = (probabilities * 100).round(1).astype(str) + "%"

    def strategy(days):
        if days > 20: return "üö® High Risk - Early Reminder"
        elif days > 5: return "‚ö†Ô∏è Medium Risk - Follow-Up"
        return "‚úÖ Low Risk - Regular Cycle"
    df["Collection_Strategy"] = df["Days_Past_Due"].apply(strategy)

    # ---------------------------
    # KPIs
    # ---------------------------
    total = len(df)
    late = (df["Predicted_Status"] == "Late").sum()
    late_pct = (late / total) * 100
    avg_due = df["Days_Past_Due"].mean()
    kpis = {"total_invoices": total, "late_pct": late_pct, "avg_days_due": avg_due}

    col1, col2, col3 = st.columns(3)
    col1.metric("üì¶ Total Invoices", total)
    col2.metric("‚è∞ Late Payments %", f"{late_pct:.1f}%")
    col3.metric("üìâ Avg Days Past Due", f"{avg_due:.1f}")

    # ---------------------------
    # Tabs
    # ---------------------------
    tab1, tab2 = st.tabs(["üìä Predictions", "üìà Visualizations"])

    with tab1:
        st.subheader("‚úÖ Predictions")
        st.dataframe(df[["Customer_ID", "Industry", "Region",
                         "Predicted_Status", "Confidence", "Collection_Strategy"]])

    with tab2:
        st.subheader("üìà Interactive Visualizations")

        # Pie Chart
        col_g1, col_i1 = st.columns([2, 1])
        with col_g1:
            fig1 = px.pie(df, names="Predicted_Status", hole=0.3, height=350)
            st.plotly_chart(fig1, use_container_width=True)
        with col_i1:
            st.markdown(f"### üìä Insights\n- {late_pct:.1f}% invoices predicted late")

        # Industry Breakdown
        col_g2, col_i2 = st.columns([2, 1])
        with col_g2:
            fig2 = px.bar(df, x="Industry", color="Predicted_Status", height=350)
            st.plotly_chart(fig2, use_container_width=True)
        with col_i2:
            st.markdown("### üè≠ Insights\n- Risk varies across industries")

        # Trend Line
        col_g3, col_i3 = st.columns([2, 1])
        with col_g3:
            fig3 = px.line(df, x="Invoice_Month", y="Days_Past_Due", markers=True, height=350)
            st.plotly_chart(fig3, use_container_width=True)
        with col_i3:
            st.markdown(f"### üìÖ Insights\n- Avg delay: {avg_due:.1f} days")

        # Boxplot
        col_g4, col_i4 = st.columns([2, 1])
        with col_g4:
            fig4 = px.box(df, x="Predicted_Status", y="Invoice_Amount", height=350)
            st.plotly_chart(fig4, use_container_width=True)
        with col_i4:
            st.markdown("### üíµ Insights\n- Larger invoices often delayed")

    # ---------------------------
    # üì• Downloads
    # ---------------------------
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Download Predictions as CSV", csv, "predictions.csv", "text/csv")

    pdf_buffer = create_pdf(df, kpis)
    st.download_button("üìë Download Full Report as PDF", pdf_buffer, "cash_flow_report.pdf", "application/pdf")

    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="Predictions", index=False)
        pd.DataFrame([kpis]).to_excel(writer, sheet_name="KPIs", index=False)

    st.download_button(
        "üìä Download Full Report as Excel",
        excel_buffer.getvalue(),
        "cash_flow_report.xlsx",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
