# -*- coding: utf-8 -*-
"""AI-Powered Cash Flow Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOgciSxwCvdtK1StWNsubdUg7D2eE9yD
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder

# ---------------------------
# Load the trained model
# ---------------------------
model = pickle.load(open("model.pkl", "rb"))

st.title("üí∞ AI-Powered Cash Flow Optimization")
st.write("Upload your AR dataset (CSV) or use demo data to get payment predictions with collection strategies.")

# ---------------------------
# File uploader + demo data
# ---------------------------
uploaded_file = st.file_uploader("üìÇ Upload AR Data (CSV)", type=["csv"])
use_demo = st.button("‚ñ∂Ô∏è Use Demo Data")

if uploaded_file or use_demo:
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        # Demo dataset
        df = pd.DataFrame({
            "Customer_ID": [101, 102, 103, 104, 105],
            "Industry": ["Manufacturing", "Retail", "Finance", "Healthcare", "IT Services"],
            "Region": ["North America", "Europe", "Asia", "Middle East", "Europe"],
            "Invoice_Amount": [5000, 12000, 7000, 15000, 3000],
            "Invoice_Month": [1, 2, 3, 4, 5],
            "Due_Month": [2, 3, 4, 5, 6],
            "Days_Past_Due": [0, 15, 30, 5, 10]
        })

    st.subheader("üìä Data Preview")
    st.write(df.head())

    # ---------------------------
    # Validate columns
    # ---------------------------
    required_cols = ["Industry", "Region", "Invoice_Amount", "Invoice_Month", "Due_Month", "Days_Past_Due"]
    if not all(col in df.columns for col in required_cols):
        st.error(f"‚ùå CSV must contain: {', '.join(required_cols)}")
        st.stop()

    # ---------------------------
    # Encode categorical variables (LabelEncoder like training)
    # ---------------------------
    le_industry = LabelEncoder()
    le_region = LabelEncoder()

    df_encoded = df.copy()
    df_encoded["Industry"] = le_industry.fit_transform(df_encoded["Industry"])
    df_encoded["Region"] = le_region.fit_transform(df_encoded["Region"])

    X = df_encoded[required_cols]

    # ---------------------------
    # Make predictions
    # ---------------------------
    predictions = model.predict(X)
    df["Predicted_Status"] = ["Late" if p == 1 else "On-Time" for p in predictions]

    # ---------------------------
    # Add collection strategy
    # ---------------------------
    def recommend_strategy(days_past_due):
        if days_past_due > 20:
            return "üö® High Risk - Send Early Reminder"
        elif days_past_due > 5:
            return "‚ö†Ô∏è Medium Risk - Standard Follow-Up"
        else:
            return "‚úÖ Low Risk - Regular Cycle"

    df["Collection_Strategy"] = df["Days_Past_Due"].apply(recommend_strategy)

    # ---------------------------
    # Show results
    # ---------------------------
    st.subheader("‚úÖ Predictions with Strategies")
    st.write(df[["Customer_ID", "Predicted_Status", "Collection_Strategy"]])

    # ---------------------------
    # Download results
    # ---------------------------
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="‚¨áÔ∏è Download Predictions as CSV",
        data=csv,
        file_name="predictions.csv",
        mime="text/csv"
    )
