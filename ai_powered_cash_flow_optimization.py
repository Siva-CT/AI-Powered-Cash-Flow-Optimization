# -*- coding: utf-8 -*-
"""AI-Powered Cash Flow Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOgciSxwCvdtK1StWNsubdUg7D2eE9yD
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
import io

# PDF generation
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet

# ---------------------------
# Load the trained model
# ---------------------------
model = pickle.load(open("model.pkl", "rb"))

st.set_page_config(page_title="AI-Powered Cash Flow Optimization", layout="wide")
st.title("üí∞ AI-Powered Cash Flow Optimization")
st.write("Upload your AR dataset (CSV) or use demo data to get payment predictions with collection strategies.")

# ---------------------------
# PDF Report Function
# ---------------------------
def create_pdf(df, figs, kpis):
    """Generate PDF report with KPIs, predictions table, and charts."""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()

    # Title
    elements.append(Paragraph("AI-Powered Cash Flow Optimization Report", styles['Title']))
    elements.append(Spacer(1, 20))

    # KPIs
    elements.append(Paragraph(f"üì¶ Total Invoices: <b>{kpis['total_invoices']}</b>", styles['Normal']))
    elements.append(Paragraph(f"‚è∞ Late Payments %: <b>{kpis['late_pct']:.1f}%</b>", styles['Normal']))
    elements.append(Paragraph(f"üìâ Avg Days Past Due: <b>{kpis['avg_days_due']:.1f}</b>", styles['Normal']))
    elements.append(Spacer(1, 20))

    # Table (first 20 rows for readability)
    table_data = [df.columns.tolist()] + df.head(20).values.tolist()
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.grey),
        ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
        ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0), (-1,-1), 8),
        ("BOTTOMPADDING", (0,0), (-1,0), 6),
        ("BACKGROUND", (0,1), (-1,-1), colors.beige),
        ("GRID", (0,0), (-1,-1), 0.5, colors.black),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))

    # Charts
    for fig in figs:
        img_buffer = io.BytesIO()
        fig.savefig(img_buffer, format="png")
        img_buffer.seek(0)
        elements.append(Image(img_buffer, width=400, height=250))
        elements.append(Spacer(1, 20))

    doc.build(elements)
    buffer.seek(0)
    return buffer

# ---------------------------
# File uploader + demo data
# ---------------------------
uploaded_file = st.file_uploader("üìÇ Upload AR Data (CSV)", type=["csv"])
use_demo = st.button("‚ñ∂Ô∏è Use Demo Data")

if uploaded_file or use_demo:
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        # Demo dataset
        df = pd.DataFrame({
            "Customer_ID": [101, 102, 103, 104, 105, 106, 107],
            "Industry": ["Manufacturing", "Retail", "Finance", "Healthcare", "IT Services", "Retail", "Finance"],
            "Region": ["North America", "Europe", "Asia", "Middle East", "Europe", "North America", "Asia"],
            "Invoice_Amount": [5000, 12000, 7000, 15000, 3000, 18000, 25000],
            "Invoice_Month": [1, 2, 3, 4, 5, 6, 7],
            "Due_Month": [2, 3, 4, 5, 6, 7, 8],
            "Days_Past_Due": [0, 15, 30, 5, 10, 25, 40]
        })

    st.subheader("üìä Data Preview")
    st.dataframe(df.head())

    # ---------------------------
    # Validate columns
    # ---------------------------
    required_cols = ["Industry", "Region", "Invoice_Amount", "Invoice_Month", "Due_Month", "Days_Past_Due"]
    if not all(col in df.columns for col in required_cols):
        st.error(f"‚ùå CSV must contain: {', '.join(required_cols)}")
        st.stop()

    # ---------------------------
    # Encode categorical variables
    # ---------------------------
    le_industry, le_region = LabelEncoder(), LabelEncoder()
    df_encoded = df.copy()
    df_encoded["Industry"] = le_industry.fit_transform(df_encoded["Industry"])
    df_encoded["Region"] = le_region.fit_transform(df_encoded["Region"])
    X = df_encoded[required_cols]

    # ---------------------------
    # Predictions with confidence
    # ---------------------------
    predictions = model.predict(X)
    probabilities = model.predict_proba(X)[:, 1]  # Probability of "Late"

    df["Predicted_Status"] = ["Late" if p == 1 else "On-Time" for p in predictions]
    df["Confidence"] = (probabilities * 100).round(1).astype(str) + "%"

    def recommend_strategy(days):
        if days > 20: return "üö® High Risk - Send Early Reminder"
        elif days > 5: return "‚ö†Ô∏è Medium Risk - Standard Follow-Up"
        return "‚úÖ Low Risk - Regular Cycle"

    df["Collection_Strategy"] = df["Days_Past_Due"].apply(recommend_strategy)

    # ---------------------------
    # KPIs
    # ---------------------------
    total_invoices = len(df)
    late_invoices = (df["Predicted_Status"] == "Late").sum()
    late_pct = (late_invoices / total_invoices) * 100
    avg_days_due = df["Days_Past_Due"].mean()

    kpis = {
        "total_invoices": total_invoices,
        "late_pct": late_pct,
        "avg_days_due": avg_days_due
    }

    col1, col2, col3 = st.columns(3)
    col1.metric("üì¶ Total Invoices", total_invoices)
    col2.metric("‚è∞ Late Payments %", f"{late_pct:.1f}%")
    col3.metric("üìâ Avg Days Past Due", f"{avg_days_due:.1f}")

    # ---------------------------
    # Show Predictions
    # ---------------------------
    st.subheader("‚úÖ Predictions with Confidence & Strategies")
    st.dataframe(df[["Customer_ID","Industry","Region","Predicted_Status","Confidence","Collection_Strategy"]])

    # ---------------------------
    # Visualizations
    # ---------------------------
    figs = []

    # Pie chart
    status_counts = df["Predicted_Status"].value_counts()
    fig1, ax1 = plt.subplots()
    ax1.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=90)
    ax1.axis("equal")
    st.pyplot(fig1)
    figs.append(fig1)

    # Bar chart
    industry_status = df.groupby(["Industry", "Predicted_Status"]).size().unstack(fill_value=0)
    if not industry_status.empty:
        fig2, ax2 = plt.subplots()
        industry_status.plot(kind="bar", ax=ax2)
        plt.ylabel("Number of Invoices")
        plt.xlabel("Industry")
        plt.xticks(rotation=45)
        plt.legend(title="Predicted Status")
        st.pyplot(fig2)
        figs.append(fig2)

    # Line chart
    avg_due = df.groupby("Invoice_Month")["Days_Past_Due"].mean()
    if not avg_due.empty:
        fig3, ax3 = plt.subplots()
        avg_due.plot(kind="line", marker="o", ax=ax3)
        plt.ylabel("Avg Days Past Due")
        plt.xlabel("Invoice Month")
        st.pyplot(fig3)
        figs.append(fig3)

    # Boxplot
    fig4, ax4 = plt.subplots()
    sns.boxplot(data=df, x="Predicted_Status", y="Invoice_Amount", ax=ax4)
    plt.ylabel("Invoice Amount")
    plt.xlabel("Predicted Status")
    st.pyplot(fig4)
    figs.append(fig4)

    # ---------------------------
    # Downloads
    # ---------------------------
    # CSV
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Download Predictions as CSV", csv, "predictions.csv", "text/csv")

    # PDF
    pdf_buffer = create_pdf(df, figs, kpis)
    st.download_button(
        label="‚¨áÔ∏è Download Full Report as PDF",
        data=pdf_buffer,
        file_name="cash_flow_report.pdf",
        mime="application/pdf"
    )
