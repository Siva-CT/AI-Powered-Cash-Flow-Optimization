# -*- coding: utf-8 -*-
"""AI-Powered Cash Flow Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOgciSxwCvdtK1StWNsubdUg7D2eE9yD
"""

import streamlit as st
import pandas as pd
import pickle
import matplotlib.pyplot as plt

# ---------------------------
# Load the trained model
# ---------------------------
model = pickle.load(open("model.pkl", "rb"))

st.title("üí∞ AI-Powered Cash Flow Optimization")
st.write("Upload your AR dataset (CSV) or try **Demo Mode** with synthetic data.")

# ---------------------------
# Demo Mode Button
# ---------------------------
use_demo = st.checkbox("‚ñ∂Ô∏è Use Demo Mode (load sample data)")

uploaded_file = None
if not use_demo:
    uploaded_file = st.file_uploader("üìÇ Upload AR Data (CSV)", type=["csv"])

if uploaded_file or use_demo:
    # ---------------------------
    # Load Data
    # ---------------------------
    if use_demo:
        try:
            df = pd.read_csv("synthetic_ar_data.csv")
            st.success("‚úÖ Loaded synthetic demo dataset.")
        except:
            st.error("‚ö†Ô∏è synthetic_ar_data.csv not found in repo. Please upload your own CSV.")
            st.stop()
    else:
        df = pd.read_csv(uploaded_file)

    st.subheader("üìä Data Preview")
    st.write(df.head())

    # ---------------------------
    # Select Features for Prediction
    # ---------------------------
    try:
        X = df[["Industry","Region","Invoice_Amount","Invoice_Month","Due_Month","Days_Past_Due"]]
    except:
        st.error("‚ùå CSV must contain: Industry, Region, Invoice_Amount, Invoice_Month, Due_Month, Days_Past_Due")
        st.stop()

    # ---------------------------
    # Make Predictions
    # ---------------------------
    predictions = model.predict(X)
    df["Predicted_Status"] = ["Late" if p==1 else "On-Time" for p in predictions]

    # ---------------------------
    # Add Collection Strategy
    # ---------------------------
    def recommend_strategy(days_past_due):
        if days_past_due > 20:
            return "üö® High Risk - Send Early Reminder"
        elif days_past_due > 5:
            return "‚ö†Ô∏è Medium Risk - Standard Follow-Up"
        else:
            return "‚úÖ Low Risk - Regular Cycle"

    df["Collection_Strategy"] = df["Days_Past_Due"].apply(recommend_strategy)

    st.subheader("‚úÖ Predictions with Strategies")
    st.write(df[["Customer_ID","Predicted_Status","Collection_Strategy"]])

    # ---------------------------
    # Insights / KPIs
    # ---------------------------
    st.subheader("üìà Insights & KPIs")

    late_pct = (df["Predicted_Status"].value_counts().get("Late",0) / len(df)) * 100
    avg_days_due = df["Days_Past_Due"].mean()

    col1, col2 = st.columns(2)
    col1.metric("üìå % Late Payments", f"{late_pct:.1f}%")
    col2.metric("üìå Avg. Days Past Due", f"{avg_days_due:.1f}")

    # ---------------------------
    # Visualization: Pie Chart
    # ---------------------------
    st.subheader("üìä Payment Status Distribution")
    status_counts = df["Predicted_Status"].value_counts()

    fig1, ax1 = plt.subplots()
    ax1.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=90)
    ax1.axis("equal")
    st.pyplot(fig1)

    # ---------------------------
    # Visualization: Bar Chart by Industry
    # ---------------------------
    st.subheader("üè≠ Late Payments by Industry")
    industry_late = df[df["Predicted_Status"]=="Late"]["Industry"].value_counts()

    if len(industry_late) > 0:
        fig2, ax2 = plt.subplots()
        industry_late.plot(kind="bar", ax=ax2)
        plt.ylabel("Count of Late Payments")
        st.pyplot(fig2)
    else:
        st.info("‚úÖ No late payments predicted for any industry.")

    # ---------------------------
    # Download Results
    # ---------------------------
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="‚¨áÔ∏è Download Predictions as CSV",
        data=csv,
        file_name="predictions.csv",
        mime="text/csv"
    )
