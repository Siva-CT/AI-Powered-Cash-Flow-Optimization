# -*- coding: utf-8 -*-
"""AI-Powered Cash Flow Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOgciSxwCvdtK1StWNsubdUg7D2eE9yD
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder
import io
import plotly.express as px
import xlsxwriter

# PDF generation
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# ---------------------------
# Load trained model
# ---------------------------
model = pickle.load(open("model.pkl", "rb"))
st.set_page_config(page_title="AI Cash Flow Optimization", layout="wide", page_icon="💰")

# ---------------------------
# Theme + Styling
# ---------------------------
theme_choice = st.sidebar.radio("🎨 Theme", ["🌞 Light", "🌙 Dark"])
if theme_choice == "🌞 Light":
    primaryColor, bgColor, textColor = "#4CAF50", "#F9FAFB", "#111827"
else:
    primaryColor, bgColor, textColor = "#10B981", "#0F172A", "#F1F5F9"

st.markdown(
    f"""
    <style>
    .stApp {{
        background-color: {bgColor};
        color: {textColor};
    }}
    .stButton>button, .stDownloadButton>button {{
        background-color: {primaryColor};
        color: white;
        border-radius: 8px;
        border: none;
        padding: 0.6em 1em;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# ---------------------------
# PDF Report Function
# ---------------------------
def create_pdf(df, kpis):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements, styles = [], getSampleStyleSheet()

    elements.append(Paragraph("AI-Powered Cash Flow Optimization Report", styles['Title']))
    elements.append(Spacer(1, 20))
    elements.append(Paragraph(f"📦 Total Invoices: <b>{kpis['total_invoices']}</b>", styles['Normal']))
    elements.append(Paragraph(f"⏰ Late Payments %: <b>{kpis['late_pct']:.1f}%</b>", styles['Normal']))
    elements.append(Paragraph(f"📉 Avg Days Past Due: <b>{kpis['avg_days_due']:.1f}</b>", styles['Normal']))
    elements.append(Spacer(1, 20))

    table_data = [df.columns.tolist()] + df.head(20).values.tolist()
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.grey),
        ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
        ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0), (-1,-1), 8),
        ("GRID", (0,0), (-1,-1), 0.5, colors.black),
    ]))
    elements.append(table)
    doc.build(elements)
    buffer.seek(0)
    return buffer

# ---------------------------
# Column Mapping
# ---------------------------
def map_columns(df):
    mapping = {
        "Industry": ["industry", "sector", "business"],
        "Region": ["region", "location", "area"],
        "Invoice_Amount": ["amount", "invoice", "value"],
        "Invoice_Month": ["invoice_month", "month"],
        "Due_Month": ["due_month", "due"],
        "Days_Past_Due": ["days_past_due", "delay", "overdue"]
    }
    col_map = {}
    for target, keywords in mapping.items():
        found = None
        for col in df.columns:
            if any(k in col.lower() for k in keywords):
                found = col
                break
        col_map[target] = found

    st.sidebar.subheader("🔧 Column Mapping")
    for target in mapping.keys():
        col_map[target] = st.sidebar.selectbox(
            f"Select column for {target}",
            options=[None] + list(df.columns),
            index=(df.columns.get_loc(col_map[target]) + 1 if col_map[target] else 0)
        )
    return col_map

# ---------------------------
# File upload / demo
# ---------------------------
st.title("💰 AI-Powered Cash Flow Optimization")
uploaded_file = st.file_uploader("📂 Upload AR Data (CSV)", type=["csv"])
use_demo = st.button("▶️ Use Demo Data")

if uploaded_file or use_demo:
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.DataFrame({
            "Customer_ID": [101, 102, 103, 104, 105, 106, 107],
            "Industry": ["Manufacturing", "Retail", "Finance", "Healthcare", "IT Services", "Retail", "Finance"],
            "Region": ["North America", "Europe", "Asia", "Middle East", "Europe", "North America", "Asia"],
            "Invoice_Amount": [5000, 12000, 7000, 15000, 3000, 18000, 25000],
            "Invoice_Month": [1, 2, 3, 4, 5, 6, 7],
            "Due_Month": [2, 3, 4, 5, 6, 7, 8],
            "Days_Past_Due": [0, 15, 30, 5, 10, 25, 40]
        })

    st.subheader("📊 Data Preview")
    st.dataframe(df.head())

    # Column mapping
    col_map = map_columns(df)
    if not all(col_map.values()):
        st.error("❌ Please map all required columns in the sidebar.")
        st.stop()

    # Sidebar filters
    st.sidebar.subheader("🔎 Filters")
    industry_filter = st.sidebar.multiselect("Filter by Industry", df[col_map["Industry"]].unique())
    region_filter = st.sidebar.multiselect("Filter by Region", df[col_map["Region"]].unique())
    month_filter = st.sidebar.multiselect("Filter by Invoice Month", df[col_map["Invoice_Month"]].unique())

    df_filtered = df.copy()
    if industry_filter:
        df_filtered = df_filtered[df_filtered[col_map["Industry"]].isin(industry_filter)]
    if region_filter:
        df_filtered = df_filtered[df_filtered[col_map["Region"]].isin(region_filter)]
    if month_filter:
        df_filtered = df_filtered[df_filtered[col_map["Invoice_Month"]].isin(month_filter)]

    if df_filtered.empty:
        st.warning("⚠️ No data matches the selected filters.")
        st.stop()

    # Encode categoricals
    le_industry, le_region = LabelEncoder(), LabelEncoder()
    df_encoded = df_filtered.copy()
    df_encoded[col_map["Industry"]] = le_industry.fit_transform(df_encoded[col_map["Industry"]])
    df_encoded[col_map["Region"]] = le_region.fit_transform(df_encoded[col_map["Region"]])

    X = df_encoded[list(col_map.values())]

    # Predictions
    predictions = model.predict(X)
    probabilities = model.predict_proba(X)[:, 1]
    df_filtered["Predicted_Status"] = ["Late" if p == 1 else "On-Time" for p in predictions]
    df_filtered["Confidence"] = (probabilities * 100).round(1).astype(str) + "%"

    def strategy(days):
        if days > 20: return "🚨 High Risk - Early Reminder"
        elif days > 5: return "⚠️ Medium Risk - Follow-Up"
        return "✅ Low Risk - Regular Cycle"
    df_filtered["Collection_Strategy"] = df_filtered[col_map["Days_Past_Due"]].apply(strategy)

    # KPIs
    total = len(df_filtered)
    late = (df_filtered["Predicted_Status"] == "Late").sum()
    late_pct = (late / total) * 100
    avg_due = df_filtered[col_map["Days_Past_Due"]].mean()
    kpis = {"total_invoices": total, "late_pct": late_pct, "avg_days_due": avg_due}

    col1, col2, col3 = st.columns(3)
    col1.metric("📦 Total Invoices", total)
    col2.metric("⏰ Late Payments %", f"{late_pct:.1f}%")
    col3.metric("📉 Avg Days Past Due", f"{avg_due:.1f}")

    # Tabs
    tab1, tab2 = st.tabs(["📊 Predictions", "📈 Visualizations"])

    with tab1:
        st.subheader("✅ Predictions")
        st.dataframe(df_filtered[["Customer_ID", col_map["Industry"], col_map["Region"],
                                  "Predicted_Status", "Confidence", "Collection_Strategy"]])

    with tab2:
        st.subheader("📈 Interactive Visualizations")

        # Pie chart + insights
        col_g1, col_i1 = st.columns([2, 1])
        with col_g1:
            fig1 = px.pie(df_filtered, names="Predicted_Status", title="On-Time vs Late",
                          color="Predicted_Status", hole=0.3, height=350)
            st.plotly_chart(fig1, use_container_width=False)
        with col_i1:
            st.markdown(f"""
            ### 📊 Insights
            - **{late_pct:.1f}%** invoices predicted late  
            - On-time invoices: {100 - late_pct:.1f}%  
            - 🚨 Prioritize high-risk accounts
            """)

        # Industry breakdown + insights
        col_g2, col_i2 = st.columns([2, 1])
        with col_g2:
            fig2 = px.bar(df_filtered, x=col_map["Industry"], color="Predicted_Status",
                          title="Predictions by Industry", barmode="group", height=350)
            st.plotly_chart(fig2, use_container_width=False)
        with col_i2:
            top_industry = df_filtered[col_map["Industry"]].mode()[0]
            st.markdown(f"""
            ### 🏭 Insights
            - Highest activity in: **{top_industry}**  
            - Sector trends show where risk is concentrated
            """)

        # Trend line + insights
        col_g3, col_i3 = st.columns([2, 1])
        with col_g3:
            fig3 = px.line(df_filtered, x=col_map["Invoice_Month"], y=col_map["Days_Past_Due"],
                           title="Avg Days Past Due by Invoice Month", markers=True, height=350)
            st.plotly_chart(fig3, use_container_width=False)
        with col_i3:
            st.markdown(f"""
            ### 📅 Insights
            - Average delay: **{avg_due:.1f} days**  
            - Peaks may indicate **seasonal risks**
            """)

        # Boxplot + insights
        col_g4, col_i4 = st.columns([2, 1])
        with col_g4:
            fig4 = px.box(df_filtered, x="Predicted_Status", y=col_map["Invoice_Amount"],
                          title="Invoice Amount Distribution by Prediction", height=350)
            st.plotly_chart(fig4, use_container_width=False)
        with col_i4:
            st.markdown("""
            ### 💵 Insights
            - Late payments often cluster at **higher amounts**  
            - Suggestion: extra checks for big invoices
            """)

    # ---------------------------
    # 📥 Downloads
    # ---------------------------
    csv = df_filtered.to_csv(index=False).encode("utf-8")
    st.download_button("⬇️ Download Predictions as CSV", csv, "predictions.csv", "text/csv")

    pdf_buffer = create_pdf(df_filtered, kpis)
    st.download_button("📑 Download Full Report as PDF", pdf_buffer, "cash_flow_report.pdf", "application/pdf")

    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="Raw Data", index=False)
        df_filtered.to_excel(writer, sheet_name="Predictions", index=False)
        pd.DataFrame([kpis]).to_excel(writer, sheet_name="KPIs", index=False)

    st.download_button(
        "📊 Download Full Report as Excel",
        excel_buffer.getvalue(),
        "cash_flow_report.xlsx",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
